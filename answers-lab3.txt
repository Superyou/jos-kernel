1. 	What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
Solution:
kernel registers all interrupts descriptors in IDT vector. When interrupt occurs the processor uses this interrupt number to index into IDT vector. If we only register 1 descriptor then it is very difficult to provide heteroginity in in execution of each interrupt. We have to unnecessarily perform additional checks and complete code will become complicated making kernel very slow. To even differentiate between error code like sometim error code is pushed sometime it is will aslo require careful accesses to stack. Thus we will be losing flexibilty along with performance which are twom major metrics for kernel quality.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

solution:

 When we enable PE bit in CR0 then protection mechanism is enabled and each memory reference is checked to verify that it satisfies various protection checks by hardware(MMU). All checks are made before the memorycycle is started; any violation results in an exception. Following is the list of checks:


a. Limit checks.
b. Type checks.
c. Privilege level checks.
d. Restriction of addressable domain.
e. Restriction of procedure entry-points.
f. Restriction of instruction set.

If any of the checks is voilated then INT 13 which is "General Protection Exception INT 13" is raised by the MMU. Thus in our case user DPL=3 and pagefault INT 14 has DPL=0 i.e it can be invoked on behalf of code which has DPL=0. SO when user invokes software interrupt 14 then it voilated privilege check and hardware raises int 13. 

part b:

If kernel allows softint to invoke the kernel page fault handler then user can access the page tables and can lead to erroneous results or even in complete system failure by manipulating complete memory.

Q3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

Solution: 
    part a.
       User environment run with DPL=3. If we give breakpoint descriptor's DPL=0 in its IDT then it means that breakpoint interrupt can only be invoked by software having CPL=0. So if DPL for breakpoint interrupt vector is 0 and from user environment if we invoke int $3 then protection violation is detected by hardware(MMU) and it raises general protection fault.

   part b.
       So inorder to get breakpoint exception to work as specified we need to make the DPL of IDT entry for breakpoint to 3(This means CPL<=3 can invoke breakpoint exception).  
       And if you set  DPL of IDT entry for breakpoint to 0 then user environment invoking breakpoint exception will cause protection violation. So incorrect setup :DPL of IDT entry for breakpoint to 3

4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
solution: 
   Main motive for these mechanism is to provide protection mechanism which will keep user level code isolated with kernel data structure and kernel code. If user level code is allowed to modify kernel data structures(as the attempt made by softint) then complete kernel can be hacked and can lead to malicious results.



Challenge #2
Challenge! Modify the JOS kernel monitor so that you can 'continue' execution from the current location (e.g., after the int3, if the kernel monitor was invoked via the breakpoint exception), and so that you can single-step one instruction at a time. You will need to understand certain bits of the EFLAGS register in order to implement single-stepping.

Solution: 
On software interrupt 3 (int $3) or break command in monitor, we can set breakpoint at current instruction. I do this by enabling trace flag(bit 9) in eflags. So when trapframe is popped while returning control back to user then TF flag will be set, which enable step debugging. So further on, at all instruction we would get debug interrupt and then we can decide whether to step to next instruction or just continue which will clear trace flag and execute till next breakpoint.

>>>Commands<<<<<
1. break: to set breakpoint at current instruction.
2. step: step to next instruction.
3. continue: continue to next breakpoint(if any or will delete user environment and give control to monitor in kernel).